import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:myparking/api/contract_api.dart';

class BookingScreen extends StatefulWidget {
  @override
  _BookingScreenState createState() => _BookingScreenState();
}

class _BookingScreenState extends State<BookingScreen> {
  List<dynamic> rentalPackages = [];
  List<dynamic> parkingSpots = [];
  List<dynamic> userVehicles = [];

  String? selectedPackage;
  String? selectedSpot;
  String? selectedVehicle;

  DateTime selectedDate = DateTime.now();
  TimeOfDay selectedTime = TimeOfDay.now();

  bool isLoading = false;

  @override
  void initState() {
    super.initState();
    _loadInitialData();
  }

  Future<void> _loadInitialData() async {
    await Future.wait([
      _loadRentalPackages(),
      _loadUserVehicles(),
    ]);
    _loadParkingSpots();
  }

  Future<void> _loadRentalPackages() async {
    try {
      var packages = await ContractApi.getRentalPackages();
      setState(() => rentalPackages = packages ?? []);
    } catch (e) {
      print("L·ªói t·∫£i g√≥i thu√™: $e");
    }
  }

  Future<void> _loadUserVehicles() async {
    try {
      var vehicles = await ContractApi.getUserVehicles();
      setState(() => userVehicles = vehicles ?? []);
    } catch (e) {
      print("L·ªói t·∫£i xe: $e");
    }
  }

  String _formatTime(TimeOfDay time) {
    return "${time.hour.toString().padLeft(2, '0')}:${time.minute.toString().padLeft(2, '0')}";
  }

  Future<void> _loadParkingSpots() async {
    if (selectedPackage == null) return;
    setState(() => isLoading = true);

    try {
      String? token = await ContractApi.getToken();
      if (token == null) throw Exception("Kh√¥ng t√¨m th·∫•y token, ƒëƒÉng nh·∫≠p l·∫°i.");

      var formattedTime = _formatTime(selectedTime);

      print("G·ªçi API v·ªõi c√°c tham s·ªë: ");
      print("Ng√†y: ${selectedDate.toIso8601String().split('T')[0]}");
      print("Gi·ªù: $formattedTime");
      print("G√≥i thu√™: $selectedPackage");

      var spotsData = await ContractApi.getValidParkingSpots(
        token,
        selectedDate.toIso8601String().split('T')[0],
        formattedTime,
        selectedPackage!,
      );

      print("D·ªØ li·ªáu √¥ ƒë·∫≠u t·ª´ server: $spotsData");

      // L·∫•y t·∫•t c·∫£ parking spots t·ª´ c√°c zones
      List<dynamic> allParkingSpots = [];
      for (var zone in spotsData) {
        if (zone.containsKey("parkingSpots")) {
          for (var spot in zone["parkingSpots"]) {
            // Ki·ªÉm tra status c·ªßa t·ª´ng parkingSpot
            if (spot["status"] == 1) {
              allParkingSpots.add(spot);
            }
          }
        }
      }

      setState(() {
        parkingSpots = allParkingSpots;
      });
    } catch (e) {
      print("L·ªói t·∫£i √¥ ƒë·∫≠u xe: $e");
    }

    setState(() => isLoading = false);
  }

  // C·∫≠p nh·∫≠t h√†m _selectDate khi ng∆∞·ªùi d√πng ch·ªçn ng√†y
  Future<void> _selectDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: selectedDate,
      firstDate: DateTime.now(),
      lastDate: DateTime(2101),
    );
    if (picked != null && picked != selectedDate) {
      setState(() => selectedDate = picked);
      _loadParkingSpots(); // G·ªçi l·∫°i khi ch·ªçn ng√†y
    }
  }

// C·∫≠p nh·∫≠t h√†m _selectTime khi ng∆∞·ªùi d√πng ch·ªçn gi·ªù
  Future<void> _selectTime(BuildContext context) async {
    final TimeOfDay? picked = await showTimePicker(
      context: context,
      initialTime: selectedTime,
    );
    if (picked != null && picked != selectedTime) {
      setState(() => selectedTime = picked);
      _loadParkingSpots(); // G·ªçi l·∫°i khi ch·ªçn gi·ªù
    }
  }

  Future<void> _bookParking() async {
    if ([selectedPackage, selectedSpot, selectedVehicle].contains(null)) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Vui l√≤ng ch·ªçn ƒë·ªß th√¥ng tin!")),
      );
      return;
    }

    setState(() => isLoading = true);

    try {
      print("üîπ B·∫Øt ƒë·∫ßu g·ª≠i y√™u c·∫ßu ƒë·∫∑t ch·ªó...");
      print("üöó Xe: $selectedVehicle");
      print("üì¶ G√≥i thu√™: $selectedPackage");
      print("üÖøÔ∏è √î ƒë·∫≠u: $selectedSpot");
      print("üìÖ Ng√†y: ${selectedDate.toIso8601String().split('T')[0]}");
      print("üïí Gi·ªù: ${_formatTime(selectedTime)}");

      bool success = await ContractApi.bookParkingSpot(
        selectedVehicle!,
        selectedPackage!,
        selectedSpot!,
        selectedDate,
        selectedTime,
      );

      print("‚úÖ K·∫øt qu·∫£ ƒë·∫∑t ch·ªó: ${success ? "Th√†nh c√¥ng" : "Th·∫•t b·∫°i"}");

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(success ? "ƒê·∫∑t ch·ªó th√†nh c√¥ng!" : "ƒê·∫∑t ch·ªó th·∫•t b·∫°i!")),
      );
    } catch (e) {
      print("‚ùå L·ªói ƒë·∫∑t ch·ªó: $e");

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("L·ªói ƒë·∫∑t ch·ªó: $e")),
      );
    }

    setState(() => isLoading = false);
  }


  String _convertForm(String form) {
    switch (form) {
      case "DAY":
        return "ng√†y";
      case "MONTH":
        return "th√°ng";
      case "YEAR":
        return "nƒÉm";
      case "HOUR":
        return "gi·ªù";
      default:
        return form;
    }
  }


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("ƒê·∫∑t ch·ªó ƒë·∫≠u xe")),
      body: Padding(
        padding: EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            DropdownButtonFormField(
              decoration: InputDecoration(labelText: "Ch·ªçn g√≥i thu√™"),
              items: rentalPackages.map((package) {
                String formattedDuration = "${package["numberOf"]} ${_convertForm(package["rentalForm"]["form"])}";
                return DropdownMenuItem(
                  value: package["id"].toString(),
                  child: Text(formattedDuration),
                );
              }).toList(),
              onChanged: (value) {
                setState(() => selectedPackage = value as String?);
                _loadParkingSpots();
              },
            ),
            SizedBox(height: 10),
            Row(
              children: [
                Expanded(child: Text("Ng√†y: ${DateFormat('dd/MM/yyyy').format(selectedDate)}")),
                ElevatedButton(onPressed: () => _selectDate(context), child: Text("Ch·ªçn ng√†y")),
              ],
            ),
            Row(
              children: [
                Expanded(child: Text("Gi·ªù: ${selectedTime.format(context)}")),
                ElevatedButton(onPressed: () => _selectTime(context), child: Text("Ch·ªçn gi·ªù")),
              ],
            ),
            SizedBox(height: 10),
            if (isLoading) Center(child: CircularProgressIndicator()),
            SizedBox(height: 10),
            DropdownButtonFormField(
              decoration: InputDecoration(labelText: "Ch·ªçn √¥ ƒë·∫≠u"),
              items: parkingSpots.isNotEmpty
                  ? parkingSpots.map((spot) {
                return DropdownMenuItem(
                  value: spot["id"].toString(),
                  child: Text(spot["location"] ?? "Kh√¥ng x√°c ƒë·ªãnh"),
                );
              }).toList()
                  : [
                const DropdownMenuItem(
                  value: null,
                  child: Text("Kh√¥ng c√≥ √¥ ƒë·∫≠u h·ª£p l·ªá"),
                ),
              ],
              onChanged: (value) => setState(() => selectedSpot = value as String?),
            ),
            SizedBox(height: 10),
            DropdownButtonFormField(
              decoration: InputDecoration(labelText: "Ch·ªçn xe"),
              items: userVehicles.map((vehicle) {
                return DropdownMenuItem(
                  value: vehicle["id"].toString(),
                  child: Text(vehicle["numberPlate"] ?? "Kh√¥ng c√≥ bi·ªÉn s·ªë"),
                );
              }).toList(),
              onChanged: (value) => setState(() => selectedVehicle = value as String?),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: isLoading ? null : _bookParking,
              child: Text("X√°c nh·∫≠n ƒë·∫∑t ch·ªó"),
            ),
          ],
        ),
      ),
    );
  }
}